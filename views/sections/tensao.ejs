<section class="tensao" id="tensao">
    <div class="subtitulo">
        <h1>Analise da Tensão</h1>
    </div>

    <div class="conteudo">
        <div class="barras-de-medicoes-na">
            <div  style="display: inline-block;"">
                <div>
                    <label>Data:</label><br>
                    <input type="text" id="datePickerInputTensao" style="width: 200px; display: inline-block;" placeholder="Escolha uma data">
                        <div id="datePickerOptionsTensao" style="color: black; display: none;">
                            <label><input type="radio" name="period" value="day"> Dia</label>
                            <label><input type="radio" name="period" value="week"> Semana</label>
                            <label><input type="radio" name="period" value="month"> Mês</label>
                            <label><input type="radio" name="period" value="semester"> Semestre</label>
                            <label><input type="radio" name="period" value="year"> Ano</label>
                            <br>
                            <label><input type="radio" name="time" value="current" checked> Atual</label>
                            <label><input type="radio" name="time" value="past"> Passado</label>
                        </div>
                    </div>

                    <script>
                        const datePickerInput = document.getElementById("datePickerInputTensao");
                        const datePickerOptions = document.getElementById("datePickerOptionsTensao");
                        const tomorrow = new Date();
                        tomorrow.setDate(tomorrow.getDate() + 1);
                    
                        const flatpickrInstance = flatpickr(datePickerInput, {
                            mode: "range",
                            maxDate: tomorrow,
                            dateFormat: "d/m/Y",
                            locale: "pt",
                            firstDayOfWeek: 0,

                            onReady: function () {
                                const fp = this;
                                if (!fp.calendarContainer.contains(datePickerOptions)) {
                                    fp.calendarContainer.appendChild(datePickerOptions);
                                }
                                datePickerOptions.style.display = 'block';
                            },
                        
                            onClose: function (selectedDates, dateStr) {
                                updateGraphsTensao();
                            },

                            onOpen: function () {
                                datePickerOptions.style.display = 'block';
                            },
                        });
                
                        datePickerOptions.addEventListener("change", function (event) {
                            if (event.target.name === "period" || event.target.name === "time") {
                                flatpickrInstance.close();
                                updateDatePicker(flatpickrInstance);
                                flatpickrInstance.open();
                            }
                        });
                
                        // Restante do código
                
                        function updateDatePicker(fp) {
                            const period = document.querySelector('input[name="period"]:checked').value;
                            const time = document.querySelector('input[name="time"]:checked').value;
                            const today = new Date();
                            let startDate = new Date(today);
                            let endDate = new Date(today);
                
                            if (period === "day") {
                                if (time === "past") {
                                    startDate.setDate(startDate.getDate() - 1);
                                    endDate.setDate(endDate.getDate() - 1);
                                }
                            } else if (period === "week") {
                                if (time === "current") {
                                    startDate.setDate(startDate.getDate() - (startDate.getDay() - 1));
                                } else {
                                    startDate.setDate(startDate.getDate() - (startDate.getDay() + 6));
                                    endDate.setDate(startDate.getDate() + 6);
                                }
                                
                            } else if (period === "month") {
                                if (time === "past") {
                                    startDate.setMonth(startDate.getMonth() - 1);
                                    endDate = new Date(startDate.getFullYear(), startDate.getMonth() + 1, 0);
                                }
                                startDate.setDate(1);
                                
                            } else if (period === "semester") {
                                if (time === "past") {
                                    startDate.setMonth(startDate.getMonth() - 6);
                                    endDate = new Date(startDate.getFullYear(), startDate.getMonth() + 6, 0);
                                }
                                startDate.setMonth(Math.floor(startDate.getMonth() / 6) * 6);
                                startDate.setDate(1);
                            } else if (period === "year") {
                                if (time === "past") {
                                    startDate.setFullYear(startDate.getFullYear() - 1);
                                    endDate = new Date(startDate.getFullYear() + 1, 0, 0);
                                }
                                startDate.setMonth(0);
                                startDate.setDate(1); 
                            }
                
                            fp.setDate([startDate, endDate]);
                        }

                                        
                        function updateGraphsTensao() {
                            let datePickerInputTensao = document.getElementById('datePickerInputTensao');
                            let dateStr = datePickerInputTensao.value;
                            const dates = dateStr.split(" to ");
                            let dateRangeValid = true;

                            // Valida as datas no formato ANO-MÊS-DIA (por exemplo, '2023-03-31')
                            const datePattern = /^\d{4}-\d{2}-\d{2}$/;
                            dates.forEach(date => {
                                if (!datePattern.test(date.trim())) {
                                dateRangeValid = false;
                                }
                            });

                            if (!dateRangeValid) {
                                console.log(dates)
                                console.error("Formato de data inválido. Use o formato ANO-MÊS-DIA (por exemplo, '2023-03-31').");
                                return;
                            }
                            
                            if (dates.length === 1) {
                                console.log(dates[0]);
                                const datesTuple = [dates[0],dates[0]]
                            } else if (dates.length === 2) {
                                console.log(`${dates[0]} até ${dates[1]}`);
                                const datesTuple = [dates[0],dates[1]]
                            }
                            

                            // Obter o valor do grupo Histórico
                            let historicoRadioButtons = document.getElementsByName('historico_tensao');
                            let historicoDiscretizacao;
                            for (let i = 0; i < historicoRadioButtons.length; i++) {
                                if (historicoRadioButtons[i].checked) {
                                    if (historicoRadioButtons[i].value === 'completo') {
                                        historicoDiscretizacao = 'geral';
                                    } else if (historicoRadioButtons[i].value === '5min') {
                                        historicoDiscretizacao = '5m';
                                    } else if (historicoRadioButtons[i].value === '15min') {
                                        historicoDiscretizacao = '15m';
                                    } else if (historicoRadioButtons[i].value === '30min') {
                                        historicoDiscretizacao = '30m';
                                    } else if (historicoRadioButtons[i].value === '1hora') {
                                        historicoDiscretizacao = '1h';
                                    }
                                    break;
                                }
                            }

                            // Obter o valor do grupo Agrupado
                            let agrupadoRadioButtons = document.getElementsByName('agrupado_tensao');
                            let agrupadoDiscretizacao;
                            for (let i = 0; i < agrupadoRadioButtons.length; i++) {
                                if (agrupadoRadioButtons[i].checked) {
                                    if (agrupadoRadioButtons[i].value === 'diario') {
                                        agrupadoDiscretizacao = 'diaria';
                                    } else if (agrupadoRadioButtons[i].value === 'semanal') {
                                        agrupadoDiscretizacao = 'semanal';
                                    } else if (agrupadoRadioButtons[i].value === 'mensal') {
                                        agrupadoDiscretizacao = 'mensal';
                                    } else if (agrupadoRadioButtons[i].value === 'semestral') {
                                        agrupadoDiscretizacao = 'semestral';
                                    } else if (agrupadoRadioButtons[i].value === 'anual') {
                                        agrupadoDiscretizacao = 'anual';
                                    }
                                    break;
                                }
                            }

                            // Chama getDataFromServer e atualiza o gráfico historico com os dados recebidos
                            getDataFromServer(datesTuple[0], datesTuple[1], 'tensao', historicoDiscretizacao)
                            .then(dataList => {
                                drawGenericChart(
                                "chart_div_tensao_historico",
                                "AreaChart",
                                "Tensão no periodo",
                                "Horário",
                                "Tensão",
                                dataList,
                                null
                                );
                            })
                            .catch(error => {
                                console.error('Erro ao obter dados do servidor:', error);
                            });

                            // Chama getDataFromServer e atualiza o gráfico historico com os dados recebidos
                            getDataFromServer(datesTuple[0], datesTuple[1], 'tensao', agrupadoDiscretizacao)
                            .then(dataList => {
                                drawGenericChart(
                                "chart_div_tensao_agrupado",
                                "ComboChart",
                                "Tensão",
                                "Data",
                                "Tensão",
                                dataList,
                                null
                                );
                            })
                            .catch(error => {
                                console.error('Erro ao obter dados do servidor:', error);
                            });

                            // Chama getDataFromServer e atualiza o gráfico historico com os dados recebidos
                            getDataFromServer(datesTuple[0], datesTuple[1], 'desvio_padrão_tensao', agrupadoDiscretizacao)
                            .then(dataList => {
                                drawGenericChart(
                                "chart_div_tensao_variacao",
                                "ComboChart",
                                "Flutuação da tensão",
                                "Data",
                                "Flutuação",
                                dataList,
                                null
                                );
                            })
                            .catch(error => {
                                console.error('Erro ao obter dados do servidor:', error);
                            });
                            
                            }
                
                    </script>

                    <br>
                    <label for="historico_tensao">Histórico:</label><br>
                    <label style="display: inline-block; margin-right: 20px;">
                        <input type="radio" id="historico_completo" name="historico_tensao" value="completo" onchange="updateGraphsTensao()" >
                        Completo
                    </label><br>

                    <label style="display: inline-block; margin-right: 20px;">
                        <input type="radio" id="historico_5min" name="historico_tensao" value="5min" onchange="updateGraphsTensao()" >
                        5 Minutos
                    </label><br>

                    <label style="display: inline-block; margin-right: 20px;">
                        <input type="radio" id="historico_15min" name="historico_tensao" value="15min" checked onchange="updateGraphsTensao()">
                        15 Minutos
                    </label><br>

                    <label style="display: inline-block; margin-right: 20px;">
                        <input type="radio" id="historico_30min" name="historico_tensao" value="30min" onchange="updateGraphsTensao()">
                        30 Minutos
                    </label><br>

                    <label style="display: inline-block; margin-right: 20px;">
                        <input type="radio" id="historico_1hora" name="historico_tensao" value="1hora" onchange="updateGraphsTensao()">
                        1 Hora
                    </label><br>

                    <br>

                    <label for="agrupado_tensao">Agrupado:</label><br>
                    <label style="display: inline-block; margin-right: 20px;">
                        <input type="radio" id="agrupado_diario" name="agrupado_tensao" value="diario" checked onchange="updateGraphsTensao()">
                        Diário
                    </label><br>

                    <label style="display: inline-block; margin-right: 20px;">
                        <input type="radio" id="agrupado_semanal" name="agrupado_tensao" value="semanal" onchange="updateGraphsTensao()">
                        Semanal
                    </label><br>

                    <label style="display: inline-block; margin-right: 20px;">
                        <input type="radio" id="agrupado_mensal" name="agrupado_tensao" value="mensal" onchange="updateGraphsTensao()">
                        Mensal
                    </label><br>

                    <label style="display: inline-block; margin-right: 20px;">
                        <input type="radio" id="agrupado_semestral" name="agrupado_tensao" value="semestral" onchange="updateGraphsTensao()">
                        Semestral
                    </label><br>

                    <label style="display: inline-block; margin-right: 20px;">
                        <input type="radio" id="agrupado_anual" name="agrupado_tensao" value="anual" onchange="updateGraphsTensao()">
                        Anual
                    </label><br>
                </div>

                <div id="chart_div_tensao_historico" style="width: 100%; height: 400px;"></div> 
                <br>
                <div id="chart_div_tensao_agrupado" style="width: 100%; height: 400px;"></div>
                <div id="chart_div_tensao_variacao" style="width: 100%; height: 400px;"></div>


            </div>

        </div>
        
    </div>
</section>