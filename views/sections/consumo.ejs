<section class="consumo" id="consumo">
    <div class="subtitulo">
        <h1>Consumo</h1>
    </div>

    <div class="conteudo">
        <div class="barras-de-medicoes-na">
            <div style="display: inline-block;">
                <div>
                    <label>Data:</label><br>
                    <input type="text" id="datePickerInputconsumo" style="width: 200px; display: inline-block;" placeholder="Escolha uma data">
                        <div id="datePickerOptionsconsumo" style="color: black; display: none;">
                            <label><input type="radio" name="period" value="day"> Dia</label>
                            <label><input type="radio" name="period" value="week"> Semana</label>
                            <label><input type="radio" name="period" value="month"> Mês</label>
                            <label><input type="radio" name="period" value="semester"> Semestre</label>
                            <label><input type="radio" name="period" value="year"> Ano</label>
                            <br>
                            <label><input type="radio" name="time" value="current" checked> Atual</label>
                            <label><input type="radio" name="time" value="past"> Passado</label>
                        </div>
                    </div>

                    <script>
                        const datePickerInput = document.getElementById("datePickerInputconsumo");
                        const datePickerOptions = document.getElementById("datePickerOptionsconsumo");
                        const tomorrow = new Date();
                        tomorrow.setDate(tomorrow.getDate() + 1);
                    
                        const flatpickrInstance = flatpickr(datePickerInput, {
                            mode: "range",
                            maxDate: tomorrow,
                            dateFormat: "d/m/Y",
                            locale: "pt",
                            firstDayOfWeek: 0,

                            onReady: function () {
                                const fp = this;
                                if (!fp.calendarContainer.contains(datePickerOptions)) {
                                    fp.calendarContainer.appendChild(datePickerOptions);
                                }
                                datePickerOptions.style.display = 'block';
                            },
                        
                            onClose: function (selectedDates, dateStr) {
                                updateGraphsconsumo();
                            },

                            onOpen: function () {
                                datePickerOptions.style.display = 'block';
                            },
                        });
                
                        datePickerOptions.addEventListener("change", function (event) {
                            if (event.target.name === "period" || event.target.name === "time") {
                                flatpickrInstance.close();
                                updateDatePicker(flatpickrInstance);
                                flatpickrInstance.open();
                            }
                        });
                
                        // Restante do código
                
                        function updateDatePicker(fp) {
                            const period = document.querySelector('input[name="period"]:checked').value;
                            const time = document.querySelector('input[name="time"]:checked').value;
                            const today = new Date();
                            let startDate = new Date(today);
                            let endDate = new Date(today);
                
                            if (period === "day") {
                                if (time === "past") {
                                    startDate.setDate(startDate.getDate() - 1);
                                    endDate.setDate(endDate.getDate() - 1);
                                }
                            } else if (period === "week") {
                                if (time === "current") {
                                    startDate.setDate(startDate.getDate() - (startDate.getDay() - 1));
                                } else {
                                    startDate.setDate(startDate.getDate() - (startDate.getDay() + 6));
                                    endDate.setDate(startDate.getDate() + 6);
                                }
                                
                            } else if (period === "month") {
                                if (time === "past") {
                                    startDate.setMonth(startDate.getMonth() - 1);
                                    endDate = new Date(startDate.getFullYear(), startDate.getMonth() + 1, 0);
                                }
                                startDate.setDate(1);
                                
                            } else if (period === "semester") {
                                if (time === "past") {
                                    startDate.setMonth(startDate.getMonth() - 6);
                                    endDate = new Date(startDate.getFullYear(), startDate.getMonth() + 6, 0);
                                }
                                startDate.setMonth(Math.floor(startDate.getMonth() / 6) * 6);
                                startDate.setDate(1);
                            } else if (period === "year") {
                                if (time === "past") {
                                    startDate.setFullYear(startDate.getFullYear() - 1);
                                    endDate = new Date(startDate.getFullYear() + 1, 0, 0);
                                }
                                startDate.setMonth(0);
                                startDate.setDate(1); 
                            }
                
                            fp.setDate([startDate, endDate]);
                        }

                                        
                        function updateGraphsconsumo() {
                        const getDateAsIsoFormat = (dateString) => {
                        const [day, month, year] = dateString.split('/');
                        return `${year}-${month}-${day}`;
                        };

                        let datePickerInputconsumo = document.getElementById('datePickerInputconsumo');
                        let dateRangeString = datePickerInputconsumo.value;
                        let dateStrings = dateRangeString.split(' até ');

                        if (dateStrings.length === 1) {
                        dateStrings.push(dateStrings[0]);
                        }

                        let convertedDates = dateStrings.map(getDateAsIsoFormat);

                            // Obter o valor do grupo Histórico
                            let historicoRadioButtons = document.getElementsByName('historico_consumo');
                            let historicoDiscretizacao;
                            for (let i = 0; i < historicoRadioButtons.length; i++) {
                                if (historicoRadioButtons[i].checked) {
                                    if (historicoRadioButtons[i].value === 'completo') {
                                        historicoDiscretizacao = 'geral';
                                    } else if (historicoRadioButtons[i].value === '5min') {
                                        historicoDiscretizacao = '5m';
                                    } else if (historicoRadioButtons[i].value === '15min') {
                                        historicoDiscretizacao = '15m';
                                    } else if (historicoRadioButtons[i].value === '30min') {
                                        historicoDiscretizacao = '30m';
                                    } else if (historicoRadioButtons[i].value === '1hora') {
                                        historicoDiscretizacao = '1h';
                                    }
                                    break;
                                }
                            }

                            // Obter o valor do grupo Agrupado
                            let agrupadoRadioButtons = document.getElementsByName('agrupado_consumo');
                            let agrupadoDiscretizacao;
                            for (let i = 0; i < agrupadoRadioButtons.length; i++) {
                                if (agrupadoRadioButtons[i].checked) {
                                    if (agrupadoRadioButtons[i].value === 'diario') {
                                        agrupadoDiscretizacao = 'diaria';
                                    } else if (agrupadoRadioButtons[i].value === 'semanal') {
                                        agrupadoDiscretizacao = 'semanal';
                                    } else if (agrupadoRadioButtons[i].value === 'mensal') {
                                        agrupadoDiscretizacao = 'mensal';
                                    } else if (agrupadoRadioButtons[i].value === 'semestral') {
                                        agrupadoDiscretizacao = 'semestral';
                                    } else if (agrupadoRadioButtons[i].value === 'anual') {
                                        agrupadoDiscretizacao = 'anual';
                                    }
                                    break;
                                }
                            }

                            // Chama getDataFromServer e atualiza o gráfico historico com os dados recebidos
                            getDataFromServer(convertedDates[0], convertedDates[1], 'consumo', historicoDiscretizacao)
                            .then(dataList => {
                                drawGenericChart(
                                "chart_div_consumo_historico",
                                "LineChart",
                                "Consumo no periodo",
                                "Horário",
                                "Potência",
                                dataList,
                                null
                                );
                            })
                            .catch(error => {
                                console.error('Erro ao obter dados do servidor:', error);
                            });

                            // Chama getDataFromServer e atualiza o gráfico historico com os dados recebidos
                            getDataFromServer(convertedDates[0], convertedDates[1], 'consumo', agrupadoDiscretizacao)
                            .then(dataList => {
                                drawGenericChart(
                                "chart_div_consumo_agrupado",
                                "ColumnChart",
                                "KW/h",
                                "Data",
                                "KW/h",
                                dataList,
                                null
                                );
                            })
                            .catch(error => {
                                console.error('Erro ao obter dados do servidor:', error);
                            });

                            // Chama getDataFromServer e atualiza o gráfico historico com os dados recebidos
                            getDataFromServer(convertedDates[0], convertedDates[1], 'consumo', agrupadoDiscretizacao)
                            .then(dataList => {
                                drawGenericChart(
                                "chart_div_preco_variacao",
                                "ColumnChart",
                                "Valor gasto",
                                "Data",
                                "R$",
                                dataList,
                                null
                                );
                            })
                            .catch(error => {
                                console.error('Erro ao obter dados do servidor:', error);
                            });
                            
                            }
                
                    </script>

                    <br>
                    <label for="historico_consumo">Histórico:</label><br>
                    <label style="display: inline-block; margin-right: 20px;">
                        <input type="radio" id="historico_completo" name="historico_consumo" value="completo" onchange="updateGraphsconsumo()" >
                        Completo
                    </label><br>

                    <label style="display: inline-block; margin-right: 20px;">
                        <input type="radio" id="historico_5min" name="historico_consumo" value="5min" onchange="updateGraphsconsumo()" >
                        5 Minutos
                    </label><br>

                    <label style="display: inline-block; margin-right: 20px;">
                        <input type="radio" id="historico_15min" name="historico_consumo" value="15min" checked onchange="updateGraphsconsumo()">
                        15 Minutos
                    </label><br>

                    <label style="display: inline-block; margin-right: 20px;">
                        <input type="radio" id="historico_30min" name="historico_consumo" value="30min" onchange="updateGraphsconsumo()">
                        30 Minutos
                    </label><br>

                    <label style="display: inline-block; margin-right: 20px;">
                        <input type="radio" id="historico_1hora" name="historico_consumo" value="1hora" onchange="updateGraphsconsumo()">
                        1 Hora
                    </label><br>

                    <br>

                    <label for="agrupado_consumo">Agrupado:</label><br>
                    <label style="display: inline-block; margin-right: 20px;">
                        <input type="radio" id="agrupado_diario" name="agrupado_consumo" value="diario" checked onchange="updateGraphsconsumo()">
                        Diário
                    </label><br>

                    <label style="display: inline-block; margin-right: 20px;">
                        <input type="radio" id="agrupado_semanal" name="agrupado_consumo" value="semanal" onchange="updateGraphsconsumo()">
                        Semanal
                    </label><br>

                    <label style="display: inline-block; margin-right: 20px;">
                        <input type="radio" id="agrupado_mensal" name="agrupado_consumo" value="mensal" onchange="updateGraphsconsumo()">
                        Mensal
                    </label><br>

                    <label style="display: inline-block; margin-right: 20px;">
                        <input type="radio" id="agrupado_semestral" name="agrupado_consumo" value="semestral" onchange="updateGraphsconsumo()">
                        Semestral
                    </label><br>

                    <label style="display: inline-block; margin-right: 20px;">
                        <input type="radio" id="agrupado_anual" name="agrupado_consumo" value="anual" onchange="updateGraphsconsumo()">
                        Anual
                    </label><br>
                </div>
                <div id="chart_div_consumo_historico" style="width: 100%; height: 400px;"></div>
            </div>       
        </div>
        <br>
        <div class="conteudo">
            <div class="barras-de-medicoes-na">
                <div style="width: 100%; display: flex;"">
                    <div id="chart_div_consumo_agrupado" style="width: 50%; height: 400px;"></div>
                    <div id="chart_div_preco_variacao" style="width: 50%; height: 400px;"></div>
                </div>
            </div>
        </div>    

    </section>