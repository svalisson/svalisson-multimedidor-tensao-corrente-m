<section class="fornecimento" id="fornecimento">
    <div class="subtitulo">
        <h1>Analise do fornecimento de energia</h1>
    </div>

    <div class="conteudo">
        <div class="barras-de-medicoes-na">
            <div style="display: inline-block;">
                <div>
                    <label>Data:</label><br>
                    <input type="text" id="datePickerInputFornecimento" style="width: 200px; display: inline-block;"
                        placeholder="Escolha uma data">
                    <div id="datePickerOptionsFornecimento" style="color: black; display: none;">
                        <label><input type="radio" name="periodFornecimento" value="day"> Dia</label>
                        <label><input type="radio" name="periodFornecimento" value="week"> Semana</label>
                        <label><input type="radio" name="periodFornecimento" value="month"> Mês</label>
                        <label><input type="radio" name="periodFornecimento" value="semester"> Semestre</label>
                        <label><input type="radio" name="periodFornecimento" value="year"> Ano</label>
                        <br>
                        <label><input type="radio" name="timeFornecimento" value="current" checked> Atual</label>
                        <label><input type="radio" name="timeFornecimento" value="past"> Passado</label>
                    </div>

                    <script>
                        const datePickerInputFornecimento = document.getElementById("datePickerInputFornecimento");
                        const datePickerOptionsFornecimento = document.getElementById("datePickerOptionsFornecimento");
                        const tomorrowFornecimento = new Date();
                        tomorrowFornecimento.setDate(tomorrowFornecimento.getDate() + 1);

                        const flatpickrInstanceFornecimento = flatpickr(datePickerInputFornecimento, {
                            mode: "range",
                            maxDate: tomorrowFornecimento,
                            dateFormat: "d/m/Y",
                            locale: "pt",
                            firstDayOfWeek: 0,

                            onReady: function () {
                                const fp = this;
                                if (!fp.calendarContainer.contains(datePickerOptionsFornecimento)) {
                                    fp.calendarContainer.appendChild(datePickerOptionsFornecimento);
                                }
                                datePickerOptionsFornecimento.style.display = 'block';
                            },

                            onClose: function (selectedDates, dateStr) {
                                updateGraphsFornecimento();
                            },

                            onOpen: function () {
                                datePickerOptionsFornecimento.style.display = 'block';
                            },
                        });

                        datePickerOptionsFornecimento.addEventListener("change", function (event) {
                            if (event.target.name === "periodFornecimento" || event.target.name === "timeFornecimento") {
                                flatpickrInstanceFornecimento.close();
                                updateDatePickerFornecimento(flatpickrInstanceFornecimento);
                                flatpickrInstanceFornecimento.open();
                            }
                        });

                        // Restante do código

                        function updateDatePickerFornecimento(fp) {
                            const period = document.querySelector('input[name="periodFornecimento"]:checked').value;
                            const time = document.querySelector('input[name="timeFornecimento"]:checked').value;
                            const today = new Date();
                            let startDate = new Date(today);
                            let endDate = new Date(today);

                            if (period === "day") {
                                if (time === "past") {
                                    startDate.setDate(startDate.getDate() - 1);
                                    endDate.setDate(endDate.getDate() - 1);
                                }
                            } else if (period === "week") {
                                if (time === "current") {
                                    startDate.setDate(startDate.getDate() - (startDate.getDay() - 1));
                                } else {
                                    startDate.setDate(startDate.getDate() - (startDate.getDay() + 6));
                                    endDate.setDate(startDate.getDate() + 6);
                                }

                            } else if (period === "month") {
                                if (time === "past") {
                                    startDate.setMonth(startDate.getMonth() - 1);
                                    endDate = new Date(startDate.getFullYear(), startDate.getMonth() + 1, 0);
                                }
                                startDate.setDate(1);

                            } else if (period === "semester") {
                                if (time === "past") {
                                    startDate.setMonth(startDate.getMonth() - 6);
                                    endDate = new Date(startDate.getFullYear(), startDate.getMonth() + 6, 0);
                                }
                                startDate.setMonth(Math.floor(startDate.getMonth() / 6) * 6);
                                startDate.setDate(1);
                            } else if (period === "year") {
                                if (time === "past") {
                                    startDate.setFullYear(startDate.getFullYear() - 1);
                                    endDate = new Date(startDate.getFullYear() + 1, 0, 0);
                                }
                                startDate.setMonth(0);
                                startDate.setDate(1);
                            }

                            fp.setDate([startDate, endDate]);
                        }

                        function updateGraphsFornecimento() {
                            const getDateAsIsoFormat = (dateString) => {
                                const [day, month, year] = dateString.split('/');
                                return `${year}-${month}-${day}`;
                            };

                            let datePickerInputFornecimento = document.getElementById('datePickerInputFornecimento');
                            let dateRangeString = datePickerInputFornecimento.value;
                            let dateStrings = dateRangeString.split(' até ');

                            if (dateStrings.length === 1) {
                                dateStrings.push(dateStrings[0]);
                            }

                            let convertedDates = dateStrings.map(getDateAsIsoFormat);

                            // Obter o valor do grupo Histórico
                            let historicoRadioButtons = document.getElementsByName('historico_fornecimento');
                            let historicoDiscretizacao;
                            for (let i = 0; i < historicoRadioButtons.length; i++) {
                                if (historicoRadioButtons[i].checked) {
                                    historicoDiscretizacao = historicoRadioButtons[i].value;
                                    break;
                                }
                            }

                            // Obter o valor do grupo Agrupado
                            let agrupadoRadioButtons = document.getElementsByName('agrupado_fornecimento');
                            let agrupadoDiscretizacao;
                            for (let i = 0; i < agrupadoRadioButtons.length; i++) {
                                if (agrupadoRadioButtons[i].checked) {
                                    agrupadoDiscretizacao = agrupadoRadioButtons[i].value;
                                    break;
                                }
                            }

                            // Chama getDataFromServer e atualiza o gráfico historico com os dados recebidos
                            getDataFromServer(convertedDates[0], convertedDates[1], 'nivel_logico', historicoDiscretizacao)
                                .then(dataList => {
                                    drawGenericChart(
                                        "chart_div_fornecimento_historico",
                                        "LineChart",
                                        "Fornecimento no período",
                                        "Horário",
                                        "Nivel Logico",
                                        dataList,
                                        null
                                    );
                                })
                                .catch(error => {
                                    console.error('Erro ao obter dados do servidor:', error);
                                });

                            // Chama getDataFromServer e atualiza o gráfico agrupado com os dados recebidos
                            getDataFromServer(convertedDates[0], convertedDates[1], 'dic', agrupadoDiscretizacao)
                                .then(dataList => {
                                    drawGenericChart(
                                        "chart_div_dic",
                                        "ColumnChart",
                                        "DIC",
                                        "Data",
                                        "Tempo em minutos",
                                        dataList,
                                        null
                                    );
                                })
                                .catch(error => {
                                    console.error('Erro ao obter dados do servidor:', error);
                                });

                            // Chama getDataFromServer e atualiza o gráfico de variação com os dados recebidos
                            getDataFromServer(convertedDates[0], convertedDates[1], 'fic', agrupadoDiscretizacao)
                                .then(dataList => {
                                    drawGenericChart(
                                        "chart_div_fic",
                                        "ColumnChart",
                                        "FIC",
                                        "Data",
                                        "Quantidade",
                                        dataList,
                                        null
                                    );
                                })
                                .catch(error => {
                                    console.error('Erro ao obter dados do servidor:', error);
                                });

                        }


                    </script>

                    <br>
                    <label for="historico_fornecimento">Histórico:</label><br>
                    <label style="display: inline-block; margin-right: 20px;">
                        <input type="radio" id="historico_completo_fornecimento" name="historico_fornecimento"
                            value="completo" onchange="updateGraphsFornecimento()">
                        Completo
                    </label><br>

                    <label style="display: inline-block; margin-right: 20px;">
                        <input type="radio" id="historico_5min_fornecimento" name="historico_fornecimento" value="5min"
                            onchange="updateGraphsFornecimento()">
                        5 Minutos
                    </label><br>

                    <label style="display: inline-block; margin-right: 20px;">
                        <input type="radio" id="historico_15min_fornecimento" name="historico_fornecimento"
                            value="15min" checked onchange="updateGraphsFornecimento()">
                        15 Minutos
                    </label><br>

                    <label style="display: inline-block; margin-right: 20px;">
                        <input type="radio" id="historico_30min_fornecimento" name="historico_fornecimento"
                            value="30min" onchange="updateGraphsFornecimento()">
                        30 Minutos
                    </label><br>

                    <label style="display: inline-block; margin-right: 20px;">
                        <input type="radio" id="historico_1hora_fornecimento" name="historico_fornecimento"
                            value="1hora" onchange="updateGraphsFornecimento()">
                        1 Hora
                    </label><br>

                    <br>

                    <label for="agrupado_fornecimento">Agrupado:</label><br>
                    <label style="display: inline-block; margin-right: 20px;">
                        <input type="radio" id="agrupado_diario_fornecimento" name="agrupado_fornecimento"
                            value="diario" checked onchange="updateGraphsFornecimento()">
                        Diário
                    </label><br>

                    <label style="display: inline-block; margin-right: 20px;">
                        <input type="radio" id="agrupado_semanal_fornecimento" name="agrupado_fornecimento"
                            value="semanal" onchange="updateGraphsFornecimento()">
                        Semanal
                    </label><br>

                    <label style="display: inline-block; margin-right: 20px;">
                        <input type="radio" id="agrupado_mensal_fornecimento" name="agrupado_fornecimento"
                            value="mensal" onchange="updateGraphsFornecimento()">
                        Mensal
                    </label><br>

                    <label style="display: inline-block; margin-right: 20px;">
                        <input type="radio" id="agrupado_semestral_fornecimento" name="agrupado_fornecimento"
                            value="semestral" onchange="updateGraphsFornecimento()">
                        Semestral
                    </label><br>

                    <label style="display: inline-block; margin-right: 20px;">
                        <input type="radio" id="agrupado_anual_fornecimento" name="agrupado_fornecimento" value="anual"
                            onchange="updateGraphsFornecimento()">
                        Anual
                    </label><br>
                </div>
                <div id="chart_div_fornecimento_historico" style="width: 100%; height: 400px;"></div>
            </div>
        </div>
        <br>
        <div class="conteudo">
            <div class="barras-de-medicoes-na">
                <div style="width: 100%; display: flex;"">
                            <div id=" chart_div_dic" style="width: 50%; height: 400px;"></div>
                <div id="chart_div_fic" style="width: 50%; height: 400px;"></div>
            </div>
        </div>
    </div>

</section>