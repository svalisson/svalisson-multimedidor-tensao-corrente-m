<!DOCTYPE html>
<html>
<head>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-maskmoney/3.0.2/jquery.maskMoney.min.js"></script>
  <script src="//cdnjs.cloudflare.com/ajax/libs/jquery.maskedinput/1.4.1/jquery.maskedinput.min.js"></script>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
  <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
  <script src="https://npmcdn.com/flatpickr/dist/l10n/pt.js"></script>
  <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>


  <script type="text/javascript">
    // Adicione o código aqui, no início da seção <script>
      document.addEventListener("DOMContentLoaded", function() {
        google.charts.load('current', { packages: ['corechart'] });
        google.charts.setOnLoadCallback(function() {
          // Você pode chamar outras funções relacionadas aos gráficos aqui.
        });
      });
    
     // Inicialização do Firebase:
     firebase.initializeApp( {
         apiKey: "AIzaSyAigFQ85uceRSjqC7hBL1ZlftNxWf0wWxo",
         authDomain: "multimedidor-tensao-corrente.firebaseapp.com",
         databaseURL: "https://multimedidor-tensao-corrente-default-rtdb.firebaseio.com",
         projectId: "multimedidor-tensao-corrente",
         storageBucket: "multimedidor-tensao-corrente.appspot.com",
         messagingSenderId: "942023989243",
         appId: "1:942023989243:web:723fac40e3f41065605d5e"
     });
  
     const {  Client } = require('pg');

     const pool = new Pool({
       user: 'rnzsitjoavxdsi',
       host: 'ec2-44-194-4-127.compute-1.amazonaws.com',
       database: 'dbgdiqt270ssd7',
       password: '082ca4bc3721a64672e28b8adc3375238d3b92b9295dd4faaf484e8901eed9ab',
       port: 5432,
       ssl: {
         rejectUnauthorized: false
       }
     });
     
     //buscar valor no postgress
     async function buscarUltimoAlerta() {
       const query = 'SELECT email, phone, consumo_mes FROM public.alerta ORDER BY set_date DESC LIMIT 1';
       try {
         const res = await pool.query(query);
         console.log('Dados buscados com sucesso:', res.rows);
         return res.rows[0];
       } catch (err) {
         console.error('Erro ao buscar os dados:', err);
         return null;
       }
     }
     
     async function attValoresControle() {
       const ultimoAlerta = await buscarUltimoAlerta();
       if (ultimoAlerta) {
         // atualize os campos de entrada com os valores obtidos
         document.getElementById('controlevalorKwh').value = ultimoAlerta.consumo_mes;
         document.getElementById('emailControle').value = ultimoAlerta.email;
         document.getElementById('phoneControle').value = ultimoAlerta.phone;
       }
     }
     
     
     // Função para enviar o valor para o postgree
     function enviarValorControle() {
         var valorControle = document.getElementById('controlevalorKwh').value;
         var emailControle = document.getElementById('emailControle').value;
         var phoneControle = document.getElementById('phoneControle').value;
         
         if (isNaN(valorControle)) {
             alert('O valor informado para o alerta de consumo não é válido');
         } else {
               var valorControle = document.getElementById('controlevalorKwh').value;
               var emailControle = document.getElementById('emailControle').value;
               var phoneControle = document.getElementById('phoneControle').value;
               inserirDados(emailControle, phoneControle, valorControle);
               alert("Alerta configurado em " + valor + "Kwh");
         }
       }
     
 
     async function inserirDados(email, phone, consumo_mes) {
       const query = 'INSERT INTO public.alerta (email, phone, consumo_mes, set_date) VALUES ($1, $2, $3, NOW())';
       const values = [email, phone, consumo_mes];
       try {
         const res = await pool.query(query, values);
         console.log('Dados inseridos com sucesso:', res.rowCount);
       } catch (err) {
         console.error('Erro ao inserir os dados:', err);
       }
     }
 
 
    function enviarCalculo(){
 
         if($("#datainicio").val() == ''){
             alert("Digita a data início, por favor")
             $("#datainicio").focus()
         } else  if($("#datafim").val() == ''){
             alert("Digita a data fim, por favor")
             $("#datafim").focus()
         }  else  if($("#valor").val() == ''){
             alert("Digita o valor, por favor")
             $("#valor").focus()
         }else{
         
             var url = "/medida?datainicio="+$("#datainicio").val()+"&datafim="+$("#datafim").val()+"&valor="+ (+$("#valor").val().replace('.', '').replace(',', '.').replace('R$', ''))+"";
         
             $( "#medida_data" ).load(url);
         }
        
     }
     var dia_atual =  new Date().toISOString();
     $(document).ready(function () { 
 
         $(function(){
             $('#valor').maskMoney({prefix:'R$ ', allowNegative: true, thousands:'.', decimal:',', affixesStay: true});
             // $('#datainicio').mask('99/99/9999');
             // $('#datafim').mask('99/99/9999');
         })
 
         
         var year =  new Date().toLocaleString("pt-br", {timeZone: "America/Sao_Paulo" , year: "numeric" });
         var month = new Date().toLocaleString("pt-br", {timeZone: "America/Sao_Paulo" , month: "2-digit"});
         var day =  new Date().toLocaleString("pt-br", {timeZone: "America/Sao_Paulo" , day: "2-digit"});
 
         const data_atual = year+"-"+month+"-"+day;
         //alert(data_atual )
         $( "#chart_div" ).load( "/profile?date="+data_atual);
 
         database.ref('VariaveisMedidas').on("value", function(snap) {
 
         
             today=new Date();
             const h=today.getHours();
             const m=today.getMinutes();
             const s=today.getSeconds();
         
         
             let horario = h+" : "+m+ " : "+s;
             let string_horario = h+""+m;
 
 
             console.log(horario);
 
             const dadosString = snap.val().dados;
             const dataSplit = dadosString.split("@");  
            
             if(dataSplit[0]){
                 conta =  dataSplit[0].split(":");  
             }
 
             if(dataSplit[1]){
                 voltagem =  dataSplit[1].split(":");  
             }
 
 
 
             if(dataSplit[2]){
                 corrente =  dataSplit[2].split(":");  
             }
 
             if(dataSplit[3]){
                 potencia =  dataSplit[3].split(":");  
             }
 
             if(dataSplit[4]){
                 energia =  dataSplit[4].split(":");  
             }
 
             if(dataSplit[5]){
                 frequencia =  dataSplit[5].split(":");  
             }
 
             if(dataSplit[6]){
                 fatordepotencia =  dataSplit[6].split(":");  
             }
 
             if(dataSplit[7]){
             ativo =  dataSplit[7].split(":");  
         }
 
             document.getElementById("corrente-in").innerHTML = corrente[1].replace('.', ',');
             document.getElementById("potencia-in").innerHTML = potencia[1].replace('.', ',');
             document.getElementById("energia-in").innerHTML = energia[1].replace('.', ',');
             document.getElementById("frequencia-in").innerHTML = frequencia[1].replace('.', ',');
             document.getElementById("fator-in").innerHTML = fatordepotencia[1].replace('.', ',');
             document.getElementById("tensao-in").innerHTML = voltagem[1].replace('.', ',');
             
         });
     });
  
     //---------------------DESENHAR GRAFICOS --------------------
  // Carregar a biblioteca do Google Charts
  google.charts.load("current", { packages: ["corechart", "line"] });

  // Definir um callback para executar quando a biblioteca estiver carregada
  google.charts.setOnLoadCallback(initialize);

  function initialize() {
    // Nada precisa ser feito aqui, já que você chama drawGenericChart
    // quando clica em um botão na sua página
  }
  
  function drawGenericChart(elementId, chartType, title, hAxisTitle, vAxisTitle, rows, extraSeries) {
  console.log(elementId, chartType, title, hAxisTitle, vAxisTitle, rows, extraSeries);
  
  const data = [];
  const header = [hAxisTitle, vAxisTitle];

  if (chartType === "ComboChart" && extraSeries) {
    header.push(...extraSeries.map((serie) => serie.name));
  }

  data.push(header);

  if (rows.length === 0) {
    data.push(["", 0]);
  } else {
    for (let i = 0; i < rows.length; i++) {
      const temp = [rows[i][0], rows[i][1]];

      if (chartType === "ComboChart" && extraSeries) {
        extraSeries.forEach((serie) => {
          temp.push(serie.value);
        });
      }

      data.push(temp);
    }
  }
  const dataTable = google.visualization.arrayToDataTable(data);
  const options = {
    title,
    hAxis: { title: hAxisTitle, titleTextStyle: { color: "#333" } },
    vAxis: { minValue: 0 },
    responsive: true,
    series: {},
    explorer: {
    actions: ["dragToZoom", "rightClickToReset", "dragToPan", "scrollToZoom"],
    axis: "both",
    keepInBounds: true,
  },
  };

  if (chartType === "ComboChart" && extraSeries) {
    extraSeries.forEach((serie, index) => {
      options.series[index + 1] = serie.options;
    });
  }

  const formatter = new google.visualization.NumberFormat({
    decimalSymbol: ",",
    groupingSymbol: ".",
  });

  formatter.format(dataTable, 1);

  const chart = new google.visualization[chartType](document.getElementById(elementId));
  chart.draw(dataTable, options);
}

   //--------------------- BUSCA DADOS PARA GRAFICOS --------------------

   function fetchWithTimeout(resource, options, timeout = 5000) {
  return new Promise((resolve, reject) => {
    const controller = new AbortController();
    const signal = controller.signal;

    const timer = setTimeout(() => {
      controller.abort();
      reject(new Error('Tempo limite da requisição atingido'));
    }, timeout);

    fetch(resource, { ...options, signal })
      .then(response => {
        clearTimeout(timer);
        resolve(response);
      })
      .catch(error => {
        clearTimeout(timer);
        reject(error);
      });
  });
}

function getDataFromServer(dataInicial, dataFinal, grandeza, discretizacao) {
  return new Promise((resolve, reject) => {
    const url = `/getdata?data_inicial=${dataInicial}&data_final=${dataFinal}&grandeza=${grandeza}&discretizacao=${discretizacao}`;
    const timeout = 20000; // Timeout em milissegundos, ajuste conforme necessário

    fetchWithTimeout(url, {}, timeout)
      .then(response => {
        if (response.ok) {
          return response.json();
        } else {
          throw new Error('Falha na requisição');
        }
      })
      .then(data => {
        const dataList = data.map(item => Object.values(item));
        resolve(dataList);
      })
      .catch(error => {
        console.error('Erro na requisição:', error);
        reject(error);
      });
  });
}







   </script>